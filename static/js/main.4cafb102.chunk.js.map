{"version":3,"sources":["pages/TodoListPage/TodoListPage.js","models/TaskModel/TaskModel.js","App.js","utils/uuidv4.js","reportWebVitals.js","index.js"],"names":["TodoListPage","tasks","handleCheckedBox","handleDeleteTask","handleRowHover","useState","filter","setFilter","filteredTasks","hoverRow","id","value","task","taskChecked","tasksRows","map","Row","className","onMouseOver","taskId","onMouseOut","Form","Check","type","label","taskText","checked","onChange","Button","taskHovered","variant","onClick","counter","Container","length","FormLabel","Task","this","App","taskInput","setTaskInput","setTasks","Control","placeholder","e","target","replace","c","r","Math","random","toString","concat","tempTasks","taskToDelete","find","window","confirm","splice","indexOf","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4cafb102.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { Container, Form, FormLabel, Row, Button } from 'react-bootstrap';\r\n// import TaskRow from '../../components/TaskRow/TaskRow';\r\nimport './TodoListPage.css';\r\n\r\nfunction TodoListPage({ tasks, handleCheckedBox, handleDeleteTask, handleRowHover }) {\r\n    const [filter, setFilter] = useState(\"all\");\r\n\r\n    let filteredTasks = [];\r\n\r\n    if (filter === \"all\") {\r\n        filteredTasks = [...tasks];\r\n    }\r\n\r\n    if (filter === \"active\") {\r\n        filteredTasks = tasks.filter(task => !task.taskChecked);\r\n    }\r\n\r\n    if (filter === \"completed\") {\r\n        filteredTasks = tasks.filter(task => task.taskChecked);\r\n    }\r\n\r\n    // const checkBoxChange = (id, value) => {\r\n    //     handleCheckedBox(id, value);\r\n    // }\r\n\r\n    function checkBoxChange(id, value) {\r\n        handleCheckedBox(id, value);\r\n    }\r\n\r\n    function hoverRow(id, value) {\r\n        handleRowHover(id, value);\r\n    }\r\n\r\n    function deleteTask(id) {\r\n        handleDeleteTask(id);\r\n    }\r\n\r\n    const tasksRows = filteredTasks.map((task) =>\r\n        <Row key={task.taskId} className=\"task-row\" onMouseOver={() => hoverRow(task.taskId, true)} onMouseOut={() => hoverRow(task.taskId, false)}>\r\n            <Form.Check type=\"checkbox\" key={task.taskId} label={task.taskText} checked={task.taskChecked} onChange={() => checkBoxChange(task.taskId, !task.taskChecked)} className={task.taskChecked ? \"isChecked\" : \"\"} />\r\n            <Button className={task.taskHovered ? \"btn-delete visible\" : \"btn-delete hidden\"} variant=\"primary\" onClick={() => deleteTask(task.taskId)}>X</Button>\r\n        </Row>\r\n    );\r\n\r\n    // items left counter\r\n    let counter = 0;\r\n    tasks.filter(task => !task.taskChecked ? counter++ : counter);\r\n\r\n    return (\r\n        <div>\r\n            <Container className=\"todos-container\">\r\n                <Row className=\"tasks-rows\">\r\n                    {tasksRows}\r\n                </Row>\r\n                {tasks && tasks.length > 0 ?\r\n                    <Row className=\"filter-row\">\r\n                        <FormLabel>{counter} items left </FormLabel>\r\n                        <Button className={filter === \"all\" ? \"filter\" : \"\"} variant=\"primary\" onClick={() => setFilter(\"all\")}>All</Button>\r\n                        <Button className={filter === \"active\" ? \"filter\" : \"\"} variant=\"primary\" onClick={() => setFilter(\"active\")}>Active</Button>\r\n                        <Button className={filter === \"completed\" ? \"filter\" : \"\"} variant=\"primary\" onClick={() => setFilter(\"completed\")}>Completed</Button>\r\n                    </Row>\r\n                    : \"\"}\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TodoListPage;","class Task {\r\n    constructor(taskId, taskText, taskChecked, taskHovered) {\r\n        this.taskId = taskId;\r\n        this.taskText = taskText;\r\n        this.taskChecked = taskChecked;\r\n        this.taskHovered = taskHovered;\r\n    }\r\n}\r\n\r\nexport default Task;\r\n","import './App.css';\nimport React, { useState } from 'react';\nimport TodoListPage from './pages/TodoListPage/TodoListPage';\nimport { Form, Container, Button } from 'react-bootstrap';\nimport Task from './models/TaskModel/TaskModel';\nimport uuidv4 from './utils/uuidv4';\n\n\nfunction App() {\n  const [taskInput, setTaskInput] = useState(\"\");\n  const [tasks, setTasks] = useState([]);\n\n  function addTask() {\n    // setTasks(tasks.concat({ taskText: taskInput, taskChecked: false }));\n\n    const taskId = uuidv4();\n\n    setTasks(tasks.concat(new Task(taskId, taskInput, false, false)));\n    setTaskInput(\"\");\n  }\n\n  function handleCheckedBox(id, value) {\n    // console.log(\"handleCheckedBox\", id, value);\n    const tempTasks = [...tasks];\n    tempTasks.map(task => { if (task.taskId === id) { task.taskChecked = value } });\n    // tempTasks[index].taskChecked = value;\n    setTasks(tempTasks);\n  }\n\n  function handleDeleteTask(id) {\n    const tempTasks = [...tasks];\n    const taskToDelete = tempTasks.find(task => task.taskId === id);\n    if (taskToDelete.taskChecked) {\n      tempTasks.splice(tempTasks.indexOf(taskToDelete), 1);\n      setTasks(tempTasks);\n    } else {\n      if (window.confirm(\"This task has not yet completed. Are you sure you want to delete it?\")) {\n        tempTasks.splice(tempTasks.indexOf(taskToDelete), 1);\n        setTasks(tempTasks);\n      }\n    }\n  }\n\n  function handleRowHover(id, value) {\n    const tempTasks = [...tasks];\n    tempTasks.map(task => { if (task.taskId === id) { task.taskHovered = value } });\n    setTasks(tempTasks);\n  }\n\n  return (\n    <div>\n      <Container className=\"input-container\">\n        <h1>My To Do List</h1>\n        <Form className=\"input-form\">\n          <Form.Control className=\"text-box\" type=\"text\" value={taskInput} placeholder=\"What's next?\" onChange={e => setTaskInput(e.target.value)} /> {/* onKeyPress={addTask} */}\n          <Button variant=\"primary\" onClick={addTask}>Add Task</Button>\n        </Form>\n      </Container>\n      < TodoListPage tasks={tasks} handleCheckedBox={handleCheckedBox} handleDeleteTask={handleDeleteTask} handleRowHover={handleRowHover} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\r\n\r\nexport default function uuidv4() {\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\r\n      var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\r\n      return v.toString(16);\r\n    });\r\n  }","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}