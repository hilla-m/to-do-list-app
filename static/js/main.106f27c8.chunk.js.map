{"version":3,"sources":["pages/TodoListPage/TodoListPage.js","models/TaskModel/TaskModel.js","App.js","utils/uuidv4.js","reportWebVitals.js","index.js"],"names":["TodoListPage","tasks","handleCheckedBox","handleDeleteTask","useState","filter","setFilter","btnDelete","setBtnDelete","filteredTasks","task","taskChecked","tasksRows","map","Row","className","onMouseOver","onMouseOut","Form","Check","type","label","taskText","checked","onChange","id","taskId","value","Button","variant","onClick","counter","Container","length","FormLabel","Task","this","App","taskInput","setTaskInput","setTasks","Control","placeholder","e","target","replace","c","r","Math","random","toString","concat","tempTasks","taskToDelete","find","window","confirm","splice","indexOf","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.106f27c8.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { Container, Form, FormLabel, Row, Button } from 'react-bootstrap';\r\n// import TaskRow from '../../components/TaskRow/TaskRow';\r\nimport './TodoListPage.css';\r\n\r\nfunction TodoListPage({ tasks, handleCheckedBox, handleDeleteTask }) {\r\n\r\n    const [filter, setFilter] = useState(\"all\");\r\n    const [btnDelete, setBtnDelete] = useState(false);\r\n\r\n    let filteredTasks = [];\r\n\r\n    if (filter === \"all\") {\r\n        filteredTasks = [...tasks];\r\n    }\r\n\r\n    if (filter === \"active\") {\r\n        filteredTasks = tasks.filter(task => !task.taskChecked);\r\n    }\r\n\r\n    if (filter === \"completed\") {\r\n        filteredTasks = tasks.filter(task => task.taskChecked);\r\n    }\r\n\r\n    // const checkBoxChange = (id, value) => {\r\n    //     handleCheckedBox(id, value);\r\n    // }\r\n\r\n    function checkBoxChange (id, value) {\r\n        handleCheckedBox(id, value);\r\n    }\r\n\r\n    function deleteTask(id) {\r\n        handleDeleteTask(id);\r\n    }\r\n\r\n    const tasksRows = filteredTasks.map((task) =>\r\n    // <TaskRow task={task}/>\r\n        <Row key={task.taskId} className=\"task-row\" onMouseOver={() => setBtnDelete(true)} onMouseOut={() => setBtnDelete(false)}>\r\n            <Form.Check type=\"checkbox\" key={task.taskId} label={task.taskText} checked={task.taskChecked} onChange={() => checkBoxChange(task.taskId, !task.taskChecked)} className={task.taskChecked ? \"isChecked\" : \"\"} />\r\n            <Button value={btnDelete} className={btnDelete ? \"btn-delete visible\" : \"btn-delete hidden\"} variant=\"primary\" onClick={() => deleteTask(task.taskId)}>X</Button>\r\n        </Row>\r\n    );\r\n\r\n    // items left counter\r\n    let counter = 0;\r\n    tasks.filter(task => !task.taskChecked ? counter++ : counter);\r\n\r\n    return (\r\n        <div>\r\n            <Container className=\"todos-container\">\r\n                <Row className=\"tasks-rows\">\r\n                    {tasksRows}\r\n                </Row>\r\n                {tasks && tasks.length > 0 ?\r\n                    <Row className=\"filter-row\">\r\n                        <FormLabel>{counter} items left </FormLabel>\r\n                        <Button className={filter === \"all\" ? \"filter\" : \"\"} variant=\"primary\" onClick={() => setFilter(\"all\")}>All</Button>\r\n                        <Button className={filter === \"active\" ? \"filter\" : \"\"} variant=\"primary\" onClick={() => setFilter(\"active\")}>Active</Button>\r\n                        <Button className={filter === \"completed\" ? \"filter\" : \"\"} variant=\"primary\" onClick={() => setFilter(\"completed\")}>Completed</Button>\r\n                    </Row>\r\n                    : \"\"}\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TodoListPage;","class Task {\r\n    constructor(taskId, taskText, taskChecked) {\r\n        this.taskId = taskId;\r\n        this.taskText = taskText;\r\n        this.taskChecked = taskChecked;\r\n    }\r\n}\r\n\r\nexport default Task;\r\n","import './App.css';\nimport React, { useState } from 'react';\nimport TodoListPage from './pages/TodoListPage/TodoListPage';\nimport { Form, Container, Button } from 'react-bootstrap';\nimport Task from './models/TaskModel/TaskModel';\nimport uuidv4 from './utils/uuidv4';\n\n\nfunction App() {\n  const [taskInput, setTaskInput] = useState(\"\");\n  const [tasks, setTasks] = useState([]);\n\n  function addTask() {\n    // setTasks(tasks.concat({ taskText: taskInput, taskChecked: false }));\n\n    const taskId = uuidv4();\n\n    setTasks(tasks.concat(new Task(taskId, taskInput, false)));\n    setTaskInput(\"\");\n  }\n\n  function handleCheckedBox(id, value) {\n    // console.log(\"handleCheckedBox\", id, value);\n    const tempTasks = [...tasks];\n\n    tempTasks.map(task => { if (task.taskId === id) { task.taskChecked = value } });\n\n    // tempTasks[index].taskChecked = value;\n\n    setTasks(tempTasks);\n  }\n\n  function handleDeleteTask(id) {\n\n    const tempTasks = [...tasks];\n    const taskToDelete = tempTasks.find(task => task.taskId === id);\n\n    if (taskToDelete.taskChecked) {\n      tempTasks.splice(tempTasks.indexOf(taskToDelete), 1);\n      setTasks(tempTasks);\n    } else {\n      if (window.confirm(\"This task has not yet completed. Are you sure you want to delete it?\")) {\n        tempTasks.splice(tempTasks.indexOf(taskToDelete), 1);\n        setTasks(tempTasks);\n      }\n    }\n  }\n\n  return (\n    <div>\n      <Container className=\"input-container\">\n        <h1>My To Do List</h1>\n        <Form className=\"input-form\">\n          <Form.Control className=\"text-box\" type=\"text\" value={taskInput} placeholder=\"What's next?\" onChange={e => setTaskInput(e.target.value)} /> {/* onKeyPress={addTask} */}\n          <Button variant=\"primary\" onClick={addTask}>Add Task</Button>\n        </Form>\n      </Container>\n      < TodoListPage tasks={tasks} handleCheckedBox={handleCheckedBox} handleDeleteTask={handleDeleteTask} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\r\n\r\nexport default function uuidv4() {\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\r\n      var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\r\n      return v.toString(16);\r\n    });\r\n  }","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}